// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/modelService.proto

#ifndef PROTOBUF_proto_2fmodelService_2eproto__INCLUDED
#define PROTOBUF_proto_2fmodelService_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fankux {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fmodelService_2eproto();
void protobuf_AssignDesc_proto_2fmodelService_2eproto();
void protobuf_ShutdownFile_proto_2fmodelService_2eproto();

class ModelRequest;
class ModelResponse;

// ===================================================================

class ModelRequest : public ::google::protobuf::Message {
 public:
  ModelRequest();
  virtual ~ModelRequest();

  ModelRequest(const ModelRequest& from);

  inline ModelRequest& operator=(const ModelRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelRequest& default_instance();

  void Swap(ModelRequest* other);

  // implements Message ----------------------------------------------

  ModelRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelRequest& from);
  void MergeFrom(const ModelRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seq = 2;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 2;
  inline ::google::protobuf::int32 seq() const;
  inline void set_seq(::google::protobuf::int32 value);

  // required string key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:fankux.ModelRequest)
 private:
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::google::protobuf::int32 seq_;
  friend void  protobuf_AddDesc_proto_2fmodelService_2eproto();
  friend void protobuf_AssignDesc_proto_2fmodelService_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmodelService_2eproto();

  void InitAsDefaultInstance();
  static ModelRequest* default_instance_;
};
// -------------------------------------------------------------------

class ModelResponse : public ::google::protobuf::Message {
 public:
  ModelResponse();
  virtual ~ModelResponse();

  ModelResponse(const ModelResponse& from);

  inline ModelResponse& operator=(const ModelResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelResponse& default_instance();

  void Swap(ModelResponse* other);

  // implements Message ----------------------------------------------

  ModelResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelResponse& from);
  void MergeFrom(const ModelResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:fankux.ModelResponse)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msg_;
  friend void  protobuf_AddDesc_proto_2fmodelService_2eproto();
  friend void protobuf_AssignDesc_proto_2fmodelService_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmodelService_2eproto();

  void InitAsDefaultInstance();
  static ModelResponse* default_instance_;
};
// ===================================================================

class ModelService_Stub;

class ModelService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ModelService() {};
 public:
  virtual ~ModelService();

  typedef ModelService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void hello(::google::protobuf::RpcController* controller,
                       const ::fankux::ModelRequest* request,
                       ::fankux::ModelResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void to_string(::google::protobuf::RpcController* controller,
                       const ::fankux::ModelRequest* request,
                       ::fankux::ModelResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ModelService);
};

class ModelService_Stub : public ModelService {
 public:
  ModelService_Stub(::google::protobuf::RpcChannel* channel);
  ModelService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ModelService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ModelService ------------------------------------------

  void hello(::google::protobuf::RpcController* controller,
                       const ::fankux::ModelRequest* request,
                       ::fankux::ModelResponse* response,
                       ::google::protobuf::Closure* done);
  void to_string(::google::protobuf::RpcController* controller,
                       const ::fankux::ModelRequest* request,
                       ::fankux::ModelResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ModelService_Stub);
};


// ===================================================================


// ===================================================================

// ModelRequest

// required int32 seq = 2;
inline bool ModelRequest::has_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelRequest::set_has_seq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelRequest::clear_has_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelRequest::clear_seq() {
  seq_ = 0;
  clear_has_seq();
}
inline ::google::protobuf::int32 ModelRequest::seq() const {
  // @@protoc_insertion_point(field_get:fankux.ModelRequest.seq)
  return seq_;
}
inline void ModelRequest::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:fankux.ModelRequest.seq)
}

// required string key = 3;
inline bool ModelRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelRequest::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ModelRequest::key() const {
  // @@protoc_insertion_point(field_get:fankux.ModelRequest.key)
  return *key_;
}
inline void ModelRequest::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:fankux.ModelRequest.key)
}
inline void ModelRequest::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:fankux.ModelRequest.key)
}
inline void ModelRequest::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fankux.ModelRequest.key)
}
inline ::std::string* ModelRequest::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fankux.ModelRequest.key)
  return key_;
}
inline ::std::string* ModelRequest::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ModelRequest::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fankux.ModelRequest.key)
}

// -------------------------------------------------------------------

// ModelResponse

// required string msg = 3;
inline bool ModelResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& ModelResponse::msg() const {
  // @@protoc_insertion_point(field_get:fankux.ModelResponse.msg)
  return *msg_;
}
inline void ModelResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:fankux.ModelResponse.msg)
}
inline void ModelResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:fankux.ModelResponse.msg)
}
inline void ModelResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fankux.ModelResponse.msg)
}
inline ::std::string* ModelResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fankux.ModelResponse.msg)
  return msg_;
}
inline ::std::string* ModelResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ModelResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fankux.ModelResponse.msg)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fankux

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fmodelService_2eproto__INCLUDED
