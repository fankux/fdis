// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/heartbeat.proto

#ifndef PROTOBUF_proto_2fheartbeat_2eproto__INCLUDED
#define PROTOBUF_proto_2fheartbeat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fdis {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fheartbeat_2eproto();
void protobuf_AssignDesc_proto_2fheartbeat_2eproto();
void protobuf_ShutdownFile_proto_2fheartbeat_2eproto();

class HeartbeatRequest;
class HeartbeatResponse;

// ===================================================================

class HeartbeatRequest : public ::google::protobuf::Message {
 public:
  HeartbeatRequest();
  virtual ~HeartbeatRequest();

  HeartbeatRequest(const HeartbeatRequest& from);

  inline HeartbeatRequest& operator=(const HeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatRequest& default_instance();

  void Swap(HeartbeatRequest* other);

  // implements Message ----------------------------------------------

  HeartbeatRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartbeatRequest& from);
  void MergeFrom(const HeartbeatRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int64 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // required int64 timemills = 3;
  inline bool has_timemills() const;
  inline void clear_timemills();
  static const int kTimemillsFieldNumber = 3;
  inline ::google::protobuf::int64 timemills() const;
  inline void set_timemills(::google::protobuf::int64 value);

  // required int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fdis.HeartbeatRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_timemills();
  inline void clear_has_timemills();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int64 timemills_;
  friend void  protobuf_AddDesc_proto_2fheartbeat_2eproto();
  friend void protobuf_AssignDesc_proto_2fheartbeat_2eproto();
  friend void protobuf_ShutdownFile_proto_2fheartbeat_2eproto();

  void InitAsDefaultInstance();
  static HeartbeatRequest* default_instance_;
};
// -------------------------------------------------------------------

class HeartbeatResponse : public ::google::protobuf::Message {
 public:
  HeartbeatResponse();
  virtual ~HeartbeatResponse();

  HeartbeatResponse(const HeartbeatResponse& from);

  inline HeartbeatResponse& operator=(const HeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatResponse& default_instance();

  void Swap(HeartbeatResponse* other);

  // implements Message ----------------------------------------------

  HeartbeatResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartbeatResponse& from);
  void MergeFrom(const HeartbeatResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // required int64 timemills = 2;
  inline bool has_timemills() const;
  inline void clear_timemills();
  static const int kTimemillsFieldNumber = 2;
  inline ::google::protobuf::int64 timemills() const;
  inline void set_timemills(::google::protobuf::int64 value);

  // required string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:fdis.HeartbeatResponse)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_timemills();
  inline void clear_has_timemills();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 timemills_;
  ::std::string* type_;
  friend void  protobuf_AddDesc_proto_2fheartbeat_2eproto();
  friend void protobuf_AssignDesc_proto_2fheartbeat_2eproto();
  friend void protobuf_ShutdownFile_proto_2fheartbeat_2eproto();

  void InitAsDefaultInstance();
  static HeartbeatResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// HeartbeatRequest

// required int32 id = 1;
inline bool HeartbeatRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartbeatRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartbeatRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartbeatRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 HeartbeatRequest::id() const {
  // @@protoc_insertion_point(field_get:fdis.HeartbeatRequest.id)
  return id_;
}
inline void HeartbeatRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:fdis.HeartbeatRequest.id)
}

// required int64 timestamp = 2;
inline bool HeartbeatRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartbeatRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartbeatRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartbeatRequest::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 HeartbeatRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:fdis.HeartbeatRequest.timestamp)
  return timestamp_;
}
inline void HeartbeatRequest::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:fdis.HeartbeatRequest.timestamp)
}

// required int64 timemills = 3;
inline bool HeartbeatRequest::has_timemills() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeartbeatRequest::set_has_timemills() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeartbeatRequest::clear_has_timemills() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeartbeatRequest::clear_timemills() {
  timemills_ = GOOGLE_LONGLONG(0);
  clear_has_timemills();
}
inline ::google::protobuf::int64 HeartbeatRequest::timemills() const {
  // @@protoc_insertion_point(field_get:fdis.HeartbeatRequest.timemills)
  return timemills_;
}
inline void HeartbeatRequest::set_timemills(::google::protobuf::int64 value) {
  set_has_timemills();
  timemills_ = value;
  // @@protoc_insertion_point(field_set:fdis.HeartbeatRequest.timemills)
}

// required int32 port = 4;
inline bool HeartbeatRequest::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeartbeatRequest::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeartbeatRequest::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeartbeatRequest::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 HeartbeatRequest::port() const {
  // @@protoc_insertion_point(field_get:fdis.HeartbeatRequest.port)
  return port_;
}
inline void HeartbeatRequest::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:fdis.HeartbeatRequest.port)
}

// -------------------------------------------------------------------

// HeartbeatResponse

// required int64 timestamp = 1;
inline bool HeartbeatResponse::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartbeatResponse::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartbeatResponse::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartbeatResponse::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 HeartbeatResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:fdis.HeartbeatResponse.timestamp)
  return timestamp_;
}
inline void HeartbeatResponse::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:fdis.HeartbeatResponse.timestamp)
}

// required int64 timemills = 2;
inline bool HeartbeatResponse::has_timemills() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartbeatResponse::set_has_timemills() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartbeatResponse::clear_has_timemills() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartbeatResponse::clear_timemills() {
  timemills_ = GOOGLE_LONGLONG(0);
  clear_has_timemills();
}
inline ::google::protobuf::int64 HeartbeatResponse::timemills() const {
  // @@protoc_insertion_point(field_get:fdis.HeartbeatResponse.timemills)
  return timemills_;
}
inline void HeartbeatResponse::set_timemills(::google::protobuf::int64 value) {
  set_has_timemills();
  timemills_ = value;
  // @@protoc_insertion_point(field_set:fdis.HeartbeatResponse.timemills)
}

// required string type = 3;
inline bool HeartbeatResponse::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeartbeatResponse::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeartbeatResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeartbeatResponse::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& HeartbeatResponse::type() const {
  // @@protoc_insertion_point(field_get:fdis.HeartbeatResponse.type)
  return *type_;
}
inline void HeartbeatResponse::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:fdis.HeartbeatResponse.type)
}
inline void HeartbeatResponse::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:fdis.HeartbeatResponse.type)
}
inline void HeartbeatResponse::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fdis.HeartbeatResponse.type)
}
inline ::std::string* HeartbeatResponse::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fdis.HeartbeatResponse.type)
  return type_;
}
inline ::std::string* HeartbeatResponse::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HeartbeatResponse::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fdis.HeartbeatResponse.type)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fdis

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fheartbeat_2eproto__INCLUDED
