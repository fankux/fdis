// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/ArrangerService.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/ArrangerService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fdis {

namespace {

const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

inline ::google::protobuf::uint32* protobuf_Offsets_proto_2fArrangerService_2eproto() { return NULL; }
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::internal::DefaultInstanceData* file_default_instances = NULL;
namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_proto_2fArrangerService_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto/ArrangerService.proto", schemas, file_default_instances, protobuf_Offsets_proto_2fArrangerService_2eproto(), factory,
      NULL, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_proto_2fArrangerService_2eproto() {
}

void protobuf_InitDefaults_proto_2fArrangerService_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::fdis::protobuf_InitDefaults_proto_2fheartbeat_2eproto();
  ::google::protobuf::internal::InitProtobufDefaults();
}

void protobuf_InitDefaults_proto_2fArrangerService_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_proto_2fArrangerService_2eproto_impl);
}
void protobuf_AddDesc_proto_2fArrangerService_2eproto_impl() {
  protobuf_InitDefaults_proto_2fArrangerService_2eproto();
  static const char descriptor[] = {
      "\n\033proto/ArrangerService.proto\022\004fdis\032\025pro"
      "to/heartbeat.proto2J\n\017ArrangerService\0227\n"
      "\004echo\022\026.fdis.HeartbeatRequest\032\027.fdis.Hea"
      "rtbeatResponseB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 139);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/ArrangerService.proto", &protobuf_RegisterTypes);
  ::fdis::protobuf_AddDesc_proto_2fheartbeat_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fArrangerService_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_proto_2fArrangerService_2eproto_once_);
void protobuf_AddDesc_proto_2fArrangerService_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_proto_2fArrangerService_2eproto_once_,
                 &protobuf_AddDesc_proto_2fArrangerService_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fArrangerService_2eproto {
  StaticDescriptorInitializer_proto_2fArrangerService_2eproto() {
    protobuf_AddDesc_proto_2fArrangerService_2eproto();
  }
} static_descriptor_initializer_proto_2fArrangerService_2eproto_;

// ===================================================================

ArrangerService::~ArrangerService() {}

const ::google::protobuf::ServiceDescriptor* ArrangerService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* ArrangerService::GetDescriptor() {
  return descriptor();
}

void ArrangerService::echo(::google::protobuf::RpcController* controller,
                         const ::fdis::HeartbeatRequest*,
                         ::fdis::HeartbeatResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method echo() not implemented.");
  done->Run();
}

void ArrangerService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      echo(controller,
             ::google::protobuf::down_cast<const ::fdis::HeartbeatRequest*>(request),
             ::google::protobuf::down_cast< ::fdis::HeartbeatResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ArrangerService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fdis::HeartbeatRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& ArrangerService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fdis::HeartbeatResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ArrangerService_Stub::ArrangerService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ArrangerService_Stub::ArrangerService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ArrangerService_Stub::~ArrangerService_Stub() {
  if (owns_channel_) delete channel_;
}

void ArrangerService_Stub::echo(::google::protobuf::RpcController* controller,
                              const ::fdis::HeartbeatRequest* request,
                              ::fdis::HeartbeatResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace fdis

// @@protoc_insertion_point(global_scope)
