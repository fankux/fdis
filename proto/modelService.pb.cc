// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/modelService.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/modelService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fankux {

namespace {

const ::google::protobuf::Descriptor* ModelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* ModelService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fmodelService_2eproto() {
  protobuf_AddDesc_proto_2fmodelService_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/modelService.proto");
  GOOGLE_CHECK(file != NULL);
  ModelRequest_descriptor_ = file->message_type(0);
  static const int ModelRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelRequest, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelRequest, key_),
  };
  ModelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelRequest_descriptor_,
      ModelRequest::default_instance_,
      ModelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelRequest));
  ModelResponse_descriptor_ = file->message_type(1);
  static const int ModelResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelResponse, msg_),
  };
  ModelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelResponse_descriptor_,
      ModelResponse::default_instance_,
      ModelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelResponse));
  ModelService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fmodelService_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelRequest_descriptor_, &ModelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelResponse_descriptor_, &ModelResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fmodelService_2eproto() {
  delete ModelRequest::default_instance_;
  delete ModelRequest_reflection_;
  delete ModelResponse::default_instance_;
  delete ModelResponse_reflection_;
}

void protobuf_AddDesc_proto_2fmodelService_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030proto/modelService.proto\022\006fankux\"(\n\014Mo"
    "delRequest\022\013\n\003seq\030\001 \002(\005\022\013\n\003key\030\002 \002(\t\";\n\r"
    "ModelResponse\022\016\n\006status\030\001 \002(\005\022\r\n\005error\030\002"
    " \002(\005\022\013\n\003msg\030\003 \002(\t2~\n\014ModelService\0224\n\005hel"
    "lo\022\024.fankux.ModelRequest\032\025.fankux.ModelR"
    "esponse\0228\n\tto_string\022\024.fankux.ModelReque"
    "st\032\025.fankux.ModelResponseB\003\200\001\001", 270);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/modelService.proto", &protobuf_RegisterTypes);
  ModelRequest::default_instance_ = new ModelRequest();
  ModelResponse::default_instance_ = new ModelResponse();
  ModelRequest::default_instance_->InitAsDefaultInstance();
  ModelResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fmodelService_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fmodelService_2eproto {
  StaticDescriptorInitializer_proto_2fmodelService_2eproto() {
    protobuf_AddDesc_proto_2fmodelService_2eproto();
  }
} static_descriptor_initializer_proto_2fmodelService_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ModelRequest::kSeqFieldNumber;
const int ModelRequest::kKeyFieldNumber;
#endif  // !_MSC_VER

ModelRequest::ModelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fankux.ModelRequest)
}

void ModelRequest::InitAsDefaultInstance() {
}

ModelRequest::ModelRequest(const ModelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fankux.ModelRequest)
}

void ModelRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seq_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelRequest::~ModelRequest() {
  // @@protoc_insertion_point(destructor:fankux.ModelRequest)
  SharedDtor();
}

void ModelRequest::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void ModelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelRequest_descriptor_;
}

const ModelRequest& ModelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fmodelService_2eproto();
  return *default_instance_;
}

ModelRequest* ModelRequest::default_instance_ = NULL;

ModelRequest* ModelRequest::New() const {
  return new ModelRequest;
}

void ModelRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    seq_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fankux.ModelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fankux.ModelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fankux.ModelRequest)
  return false;
#undef DO_
}

void ModelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fankux.ModelRequest)
  // required int32 seq = 1;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seq(), output);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fankux.ModelRequest)
}

::google::protobuf::uint8* ModelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fankux.ModelRequest)
  // required int32 seq = 1;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seq(), target);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fankux.ModelRequest)
  return target;
}

int ModelRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seq = 1;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

    // required string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelRequest::MergeFrom(const ModelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelRequest::CopyFrom(const ModelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ModelRequest::Swap(ModelRequest* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelRequest_descriptor_;
  metadata.reflection = ModelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModelResponse::kStatusFieldNumber;
const int ModelResponse::kErrorFieldNumber;
const int ModelResponse::kMsgFieldNumber;
#endif  // !_MSC_VER

ModelResponse::ModelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fankux.ModelResponse)
}

void ModelResponse::InitAsDefaultInstance() {
}

ModelResponse::ModelResponse(const ModelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fankux.ModelResponse)
}

void ModelResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  error_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelResponse::~ModelResponse() {
  // @@protoc_insertion_point(destructor:fankux.ModelResponse)
  SharedDtor();
}

void ModelResponse::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void ModelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelResponse_descriptor_;
}

const ModelResponse& ModelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fmodelService_2eproto();
  return *default_instance_;
}

ModelResponse* ModelResponse::default_instance_ = NULL;

ModelResponse* ModelResponse::New() const {
  return new ModelResponse;
}

void ModelResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ModelResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(status_, error_);
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fankux.ModelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // required int32 error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // required string msg = 3;
      case 3: {
        if (tag == 26) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fankux.ModelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fankux.ModelResponse)
  return false;
#undef DO_
}

void ModelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fankux.ModelResponse)
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // required int32 error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error(), output);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fankux.ModelResponse)
}

::google::protobuf::uint8* ModelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fankux.ModelResponse)
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // required int32 error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error(), target);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fankux.ModelResponse)
  return target;
}

int ModelResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // required string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelResponse::MergeFrom(const ModelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelResponse::CopyFrom(const ModelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ModelResponse::Swap(ModelResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(error_, other->error_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelResponse_descriptor_;
  metadata.reflection = ModelResponse_reflection_;
  return metadata;
}


// ===================================================================

ModelService::~ModelService() {}

const ::google::protobuf::ServiceDescriptor* ModelService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ModelService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelService_descriptor_;
}

void ModelService::hello(::google::protobuf::RpcController* controller,
                         const ::fankux::ModelRequest*,
                         ::fankux::ModelResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method hello() not implemented.");
  done->Run();
}

void ModelService::to_string(::google::protobuf::RpcController* controller,
                         const ::fankux::ModelRequest*,
                         ::fankux::ModelResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method to_string() not implemented.");
  done->Run();
}

void ModelService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ModelService_descriptor_);
  switch(method->index()) {
    case 0:
      hello(controller,
             ::google::protobuf::down_cast<const ::fankux::ModelRequest*>(request),
             ::google::protobuf::down_cast< ::fankux::ModelResponse*>(response),
             done);
      break;
    case 1:
      to_string(controller,
             ::google::protobuf::down_cast<const ::fankux::ModelRequest*>(request),
             ::google::protobuf::down_cast< ::fankux::ModelResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ModelService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fankux::ModelRequest::default_instance();
    case 1:
      return ::fankux::ModelRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ModelService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fankux::ModelResponse::default_instance();
    case 1:
      return ::fankux::ModelResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ModelService_Stub::ModelService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ModelService_Stub::ModelService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ModelService_Stub::~ModelService_Stub() {
  if (owns_channel_) delete channel_;
}

void ModelService_Stub::hello(::google::protobuf::RpcController* controller,
                              const ::fankux::ModelRequest* request,
                              ::fankux::ModelResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ModelService_Stub::to_string(::google::protobuf::RpcController* controller,
                              const ::fankux::ModelRequest* request,
                              ::fankux::ModelResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace fankux

// @@protoc_insertion_point(global_scope)
