// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/heartbeat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/heartbeat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fdis {
class HeartbeatRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HeartbeatRequest> {};
HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
class HeartbeatResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HeartbeatResponse> {};
HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_proto_2fheartbeat_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_proto_2fheartbeat_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, timemills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, port_),
    1,
    0,
    3,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, timemills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, type_),
    1,
    2,
    0,
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(HeartbeatRequest)},
  { 12, 19, sizeof(HeartbeatResponse)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_HeartbeatRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_HeartbeatResponse_default_instance_), NULL},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_proto_2fheartbeat_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto/heartbeat.proto", schemas, file_default_instances, protobuf_Offsets_proto_2fheartbeat_2eproto(), factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void protobuf_ShutdownFile_proto_2fheartbeat_2eproto() {
  _HeartbeatRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _HeartbeatResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void protobuf_InitDefaults_proto_2fheartbeat_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _HeartbeatRequest_default_instance_.DefaultConstruct();
  _HeartbeatResponse_default_instance_.DefaultConstruct();
}

void protobuf_InitDefaults_proto_2fheartbeat_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_proto_2fheartbeat_2eproto_impl);
}
void protobuf_AddDesc_proto_2fheartbeat_2eproto_impl() {
  protobuf_InitDefaults_proto_2fheartbeat_2eproto();
  static const char descriptor[] = {
      "\n\025proto/heartbeat.proto\022\004fdis\"R\n\020Heartbe"
      "atRequest\022\n\n\002id\030\001 \002(\005\022\021\n\ttimestamp\030\002 \002(\003"
      "\022\021\n\ttimemills\030\003 \002(\003\022\014\n\004port\030\004 \002(\005\"G\n\021Hea"
      "rtbeatResponse\022\021\n\ttimestamp\030\001 \002(\003\022\021\n\ttim"
      "emills\030\002 \002(\003\022\014\n\004type\030\003 \002(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 186);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/heartbeat.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fheartbeat_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_proto_2fheartbeat_2eproto_once_);
void protobuf_AddDesc_proto_2fheartbeat_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_proto_2fheartbeat_2eproto_once_,
                 &protobuf_AddDesc_proto_2fheartbeat_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fheartbeat_2eproto {
  StaticDescriptorInitializer_proto_2fheartbeat_2eproto() {
    protobuf_AddDesc_proto_2fheartbeat_2eproto();
  }
} static_descriptor_initializer_proto_2fheartbeat_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartbeatRequest::kIdFieldNumber;
const int HeartbeatRequest::kTimestampFieldNumber;
const int HeartbeatRequest::kTimemillsFieldNumber;
const int HeartbeatRequest::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartbeatRequest::HeartbeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_proto_2fheartbeat_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fdis.HeartbeatRequest)
}
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&timemills_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(timemills_));
  // @@protoc_insertion_point(copy_constructor:fdis.HeartbeatRequest)
}

void HeartbeatRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&timemills_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(timemills_));
}

HeartbeatRequest::~HeartbeatRequest() {
  // @@protoc_insertion_point(destructor:fdis.HeartbeatRequest)
  SharedDtor();
}

void HeartbeatRequest::SharedDtor() {
}

void HeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0].descriptor;
}

const HeartbeatRequest& HeartbeatRequest::default_instance() {
  protobuf_InitDefaults_proto_2fheartbeat_2eproto();
  return *internal_default_instance();
}

HeartbeatRequest* HeartbeatRequest::New(::google::protobuf::Arena* arena) const {
  HeartbeatRequest* n = new HeartbeatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fdis.HeartbeatRequest)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&timemills_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(timemills_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fdis.HeartbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 timestamp = 2;
      case 2: {
        if (tag == 16u) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 timemills = 3;
      case 3: {
        if (tag == 24u) {
          set_has_timemills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timemills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 port = 4;
      case 4: {
        if (tag == 32u) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fdis.HeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fdis.HeartbeatRequest)
  return false;
#undef DO_
}

void HeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fdis.HeartbeatRequest)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // required int64 timemills = 3;
  if (has_timemills()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timemills(), output);
  }

  // required int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fdis.HeartbeatRequest)
}

::google::protobuf::uint8* HeartbeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fdis.HeartbeatRequest)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // required int64 timemills = 3;
  if (has_timemills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timemills(), target);
  }

  // required int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fdis.HeartbeatRequest)
  return target;
}

size_t HeartbeatRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fdis.HeartbeatRequest)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required int64 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_port()) {
    // required int32 port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  if (has_timemills()) {
    // required int64 timemills = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timemills());
  }

  return total_size;
}
size_t HeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fdis.HeartbeatRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

    // required int64 timemills = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timemills());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fdis.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartbeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fdis.HeartbeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fdis.HeartbeatRequest)
    MergeFrom(*source);
  }
}

void HeartbeatRequest::MergeFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fdis.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_timemills()) {
      set_timemills(from.timemills());
    }
  }
}

void HeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fdis.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fdis.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void HeartbeatRequest::Swap(HeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartbeatRequest::InternalSwap(HeartbeatRequest* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(id_, other->id_);
  std::swap(port_, other->port_);
  std::swap(timemills_, other->timemills_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartbeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartbeatRequest

// required int32 id = 1;
bool HeartbeatRequest::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HeartbeatRequest::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void HeartbeatRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void HeartbeatRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 HeartbeatRequest::id() const {
  // @@protoc_insertion_point(field_get:fdis.HeartbeatRequest.id)
  return id_;
}
void HeartbeatRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:fdis.HeartbeatRequest.id)
}

// required int64 timestamp = 2;
bool HeartbeatRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeartbeatRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void HeartbeatRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeartbeatRequest::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 HeartbeatRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:fdis.HeartbeatRequest.timestamp)
  return timestamp_;
}
void HeartbeatRequest::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:fdis.HeartbeatRequest.timestamp)
}

// required int64 timemills = 3;
bool HeartbeatRequest::has_timemills() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HeartbeatRequest::set_has_timemills() {
  _has_bits_[0] |= 0x00000008u;
}
void HeartbeatRequest::clear_has_timemills() {
  _has_bits_[0] &= ~0x00000008u;
}
void HeartbeatRequest::clear_timemills() {
  timemills_ = GOOGLE_LONGLONG(0);
  clear_has_timemills();
}
::google::protobuf::int64 HeartbeatRequest::timemills() const {
  // @@protoc_insertion_point(field_get:fdis.HeartbeatRequest.timemills)
  return timemills_;
}
void HeartbeatRequest::set_timemills(::google::protobuf::int64 value) {
  set_has_timemills();
  timemills_ = value;
  // @@protoc_insertion_point(field_set:fdis.HeartbeatRequest.timemills)
}

// required int32 port = 4;
bool HeartbeatRequest::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HeartbeatRequest::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
void HeartbeatRequest::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
void HeartbeatRequest::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 HeartbeatRequest::port() const {
  // @@protoc_insertion_point(field_get:fdis.HeartbeatRequest.port)
  return port_;
}
void HeartbeatRequest::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:fdis.HeartbeatRequest.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartbeatResponse::kTimestampFieldNumber;
const int HeartbeatResponse::kTimemillsFieldNumber;
const int HeartbeatResponse::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartbeatResponse::HeartbeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_proto_2fheartbeat_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fdis.HeartbeatResponse)
}
HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&timemills_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(timemills_));
  // @@protoc_insertion_point(copy_constructor:fdis.HeartbeatResponse)
}

void HeartbeatResponse::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&timemills_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(timemills_));
}

HeartbeatResponse::~HeartbeatResponse() {
  // @@protoc_insertion_point(destructor:fdis.HeartbeatResponse)
  SharedDtor();
}

void HeartbeatResponse::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1].descriptor;
}

const HeartbeatResponse& HeartbeatResponse::default_instance() {
  protobuf_InitDefaults_proto_2fheartbeat_2eproto();
  return *internal_default_instance();
}

HeartbeatResponse* HeartbeatResponse::New(::google::protobuf::Arena* arena) const {
  HeartbeatResponse* n = new HeartbeatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fdis.HeartbeatResponse)
  if (has_type()) {
    GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*type_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&timemills_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(timemills_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fdis.HeartbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timestamp = 1;
      case 1: {
        if (tag == 8u) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 timemills = 2;
      case 2: {
        if (tag == 16u) {
          set_has_timemills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timemills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string type = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fdis.HeartbeatResponse.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fdis.HeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fdis.HeartbeatResponse)
  return false;
#undef DO_
}

void HeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fdis.HeartbeatResponse)
  // required int64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // required int64 timemills = 2;
  if (has_timemills()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timemills(), output);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fdis.HeartbeatResponse.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fdis.HeartbeatResponse)
}

::google::protobuf::uint8* HeartbeatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fdis.HeartbeatResponse)
  // required int64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // required int64 timemills = 2;
  if (has_timemills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timemills(), target);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fdis.HeartbeatResponse.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fdis.HeartbeatResponse)
  return target;
}

size_t HeartbeatResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fdis.HeartbeatResponse)
  size_t total_size = 0;

  if (has_type()) {
    // required string type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_timestamp()) {
    // required int64 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  if (has_timemills()) {
    // required int64 timemills = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timemills());
  }

  return total_size;
}
size_t HeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fdis.HeartbeatResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required int64 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

    // required int64 timemills = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timemills());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fdis.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartbeatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fdis.HeartbeatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fdis.HeartbeatResponse)
    MergeFrom(*source);
  }
}

void HeartbeatResponse::MergeFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fdis.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_timemills()) {
      set_timemills(from.timemills());
    }
  }
}

void HeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fdis.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fdis.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void HeartbeatResponse::Swap(HeartbeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartbeatResponse::InternalSwap(HeartbeatResponse* other) {
  type_.Swap(&other->type_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(timemills_, other->timemills_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartbeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartbeatResponse

// required int64 timestamp = 1;
bool HeartbeatResponse::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HeartbeatResponse::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void HeartbeatResponse::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void HeartbeatResponse::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 HeartbeatResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:fdis.HeartbeatResponse.timestamp)
  return timestamp_;
}
void HeartbeatResponse::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:fdis.HeartbeatResponse.timestamp)
}

// required int64 timemills = 2;
bool HeartbeatResponse::has_timemills() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HeartbeatResponse::set_has_timemills() {
  _has_bits_[0] |= 0x00000004u;
}
void HeartbeatResponse::clear_has_timemills() {
  _has_bits_[0] &= ~0x00000004u;
}
void HeartbeatResponse::clear_timemills() {
  timemills_ = GOOGLE_LONGLONG(0);
  clear_has_timemills();
}
::google::protobuf::int64 HeartbeatResponse::timemills() const {
  // @@protoc_insertion_point(field_get:fdis.HeartbeatResponse.timemills)
  return timemills_;
}
void HeartbeatResponse::set_timemills(::google::protobuf::int64 value) {
  set_has_timemills();
  timemills_ = value;
  // @@protoc_insertion_point(field_set:fdis.HeartbeatResponse.timemills)
}

// required string type = 3;
bool HeartbeatResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeartbeatResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void HeartbeatResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeartbeatResponse::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& HeartbeatResponse::type() const {
  // @@protoc_insertion_point(field_get:fdis.HeartbeatResponse.type)
  return type_.GetNoArena();
}
void HeartbeatResponse::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fdis.HeartbeatResponse.type)
}
void HeartbeatResponse::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fdis.HeartbeatResponse.type)
}
void HeartbeatResponse::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fdis.HeartbeatResponse.type)
}
::std::string* HeartbeatResponse::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:fdis.HeartbeatResponse.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeartbeatResponse::release_type() {
  // @@protoc_insertion_point(field_release:fdis.HeartbeatResponse.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeartbeatResponse::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:fdis.HeartbeatResponse.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fdis

// @@protoc_insertion_point(global_scope)
